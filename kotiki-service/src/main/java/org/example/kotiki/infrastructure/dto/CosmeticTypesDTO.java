/*
 * Simple Inventory API
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.example.kotiki.infrastructure.dto;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
/**
 * CosmeticTypes
 */

public class CosmeticTypesDTO {
  @SerializedName("cosmetic-types")
  private List<String> cosmeticTypes = new ArrayList<String>();

  public CosmeticTypesDTO cosmeticTypes(List<String> cosmeticTypes) {
    this.cosmeticTypes = cosmeticTypes;
    return this;
  }

  public CosmeticTypesDTO addCosmeticTypesItem(String cosmeticTypesItem) {
    this.cosmeticTypes.add(cosmeticTypesItem);
    return this;
  }

   /**
   * Get cosmeticTypes
   * @return cosmeticTypes
  **/
  @Schema(required = true, description = "")
  public List<String> getCosmeticTypes() {
    return cosmeticTypes;
  }

  public void setCosmeticTypes(List<String> cosmeticTypes) {
    this.cosmeticTypes = cosmeticTypes;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CosmeticTypesDTO cosmeticTypes = (CosmeticTypesDTO) o;
    return Objects.equals(this.cosmeticTypes, cosmeticTypes.cosmeticTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cosmeticTypes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CosmeticTypes {\n");
    
    sb.append("    cosmeticTypes: ").append(toIndentedString(cosmeticTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
